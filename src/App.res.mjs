// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function getCharWidth(c) {
  switch (c) {
    case "i" :
    case "l" :
        return 1;
    case "f" :
    case "r" :
    case "t" :
        return 2;
    case "m" :
    case "w" :
        return 4;
    default:
      return 3;
  }
}

function App$WordIcon(props) {
  var __size = props.size;
  var size = __size !== undefined ? __size : 4;
  var sArr = props.text.split("");
  var withCharWidth = sArr.map(function (c) {
        return [
                c,
                getCharWidth(c)
              ];
      });
  var totalWidth = Core__Array.reduce(withCharWidth, 0, (function (acc, param) {
          return acc + param[1] | 0;
        }));
  var rootWidth = Math.sqrt(totalWidth);
  var bound = Math.round(rootWidth * 2.2) | 0;
  var match = Core__Array.reduce(withCharWidth, [
        [],
        [],
        0
      ], (function (param, param$1) {
          var w = param$1[1];
          var c = param$1[0];
          var curW = param[2];
          var curS = param[1];
          var acc = param[0];
          if ((curW + w | 0) > bound) {
            return [
                    Belt_Array.concatMany([
                          acc,
                          [curS]
                        ]),
                    [c],
                    w
                  ];
          } else {
            return [
                    acc,
                    Belt_Array.concatMany([
                          curS,
                          [c]
                        ]),
                    curW + w | 0
                  ];
          }
        }));
  var dividedArrs = Belt_Array.concatMany([
        match[0],
        [match[1]]
      ]);
  var dividedS = dividedArrs.map(function (curS) {
        return curS.join("");
      });
  var widthScaler = size / rootWidth;
  var heightScaler = widthScaler / dividedS.length;
  var scaledMaring = "-" + (0.8 * heightScaler).toString() + "rem";
  return JsxRuntime.jsx("div", {
              children: dividedS.map(function (sPart) {
                    return JsxRuntime.jsx("div", {
                                children: sPart,
                                style: {
                                  marginTop: scaledMaring,
                                  marginBottom: scaledMaring
                                }
                              });
                  }),
              className: " font-black tracking-tighter leading-none flex flex-col items-center justify-center",
              style: {
                fontSize: (2 * widthScaler).toString() + "rem",
                height: size.toString() + "rem",
                width: size.toString() + "rem"
              }
            });
}

function App$Wrap(props) {
  return JsxRuntime.jsx("div", {
              children: props.children,
              className: "p-2 border rounded w-fit m-2 border-gray-300 shadow "
            });
}

function App(props) {
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Settings"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Delete"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Menu"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Hang Up"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Edit"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Home"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Zoom"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "back"
                          })
                    }),
                JsxRuntime.jsx(App$Wrap, {
                      children: JsxRuntime.jsx(App$WordIcon, {
                            text: "Ask Question"
                          })
                    })
              ],
              className: "p-6"
            });
}

var make = App;

export {
  make ,
}
/* react/jsx-runtime Not a pure module */
